/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package restaurant;



import java.sql.PreparedStatement;
import javax.swing.*;  
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSetMetaData;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JPasswordField;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Dell
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    JFrame f;
     ResultSet rs;
     String url="jdbc:sqlserver://localhost:1433;databaseName=restaurantmManagement";
              String user = "sa";
             String password = "123";



    
    
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        addItems = new javax.swing.JButton();
        updateItems = new javax.swing.JButton();
        deleteItems = new javax.swing.JButton();
        viewItem = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextMenuItem = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Price = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextIngre = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jmenuId = new javax.swing.JTextField();
        jCat = new javax.swing.JComboBox<>();
        jSta = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        jEnter = new javax.swing.JButton();
        jInput = new javax.swing.JTextField();
        jQueryB = new javax.swing.JComboBox<>();
        jqueryA = new javax.swing.JTextField();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 255, 51));
        setForeground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jPanel2.setBackground(new java.awt.Color(255, 0, 51));

        addItems.setBackground(new java.awt.Color(255, 0, 51));
        addItems.setFont(new java.awt.Font("Arial Black", 1, 11)); // NOI18N
        addItems.setText("ADD ITEMS");
        addItems.setBorder(new javax.swing.border.MatteBorder(null));
        addItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemsActionPerformed(evt);
            }
        });

        updateItems.setBackground(new java.awt.Color(255, 0, 51));
        updateItems.setFont(new java.awt.Font("Arial Black", 1, 11)); // NOI18N
        updateItems.setText("UPDATE ITEMS");
        updateItems.setBorder(new javax.swing.border.MatteBorder(null));
        updateItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateItemsActionPerformed(evt);
            }
        });

        deleteItems.setBackground(new java.awt.Color(255, 0, 51));
        deleteItems.setFont(new java.awt.Font("Arial Black", 1, 11)); // NOI18N
        deleteItems.setText("DELETE ITEMS");
        deleteItems.setBorder(new javax.swing.border.MatteBorder(null));
        deleteItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemsActionPerformed(evt);
            }
        });

        viewItem.setBackground(new java.awt.Color(255, 0, 51));
        viewItem.setFont(new java.awt.Font("Arial Black", 1, 11)); // NOI18N
        viewItem.setText("VIEW ITEMS");
        viewItem.setBorder(new javax.swing.border.MatteBorder(null));
        viewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addItems, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(updateItems, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteItems, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(viewItem, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addItems, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateItems, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewItem, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteItems, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(255, 0, 51));

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 11)); // NOI18N
        jLabel2.setText("        MENU ITEM");

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 11)); // NOI18N
        jLabel3.setText("          PRICE");

        Price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial Black", 1, 11)); // NOI18N
        jLabel4.setText("INGREDIENTS");

        jTextIngre.setColumns(20);
        jTextIngre.setRows(5);
        jScrollPane2.setViewportView(jTextIngre);

        jLabel5.setFont(new java.awt.Font("Arial Black", 1, 11)); // NOI18N
        jLabel5.setText("STATUS");

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 11)); // NOI18N
        jLabel7.setText("Categories");

        jLabel6.setText("menuId");

        jCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Food" }));
        jCat.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jCatMouseMoved(evt);
            }
        });
        jCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCatActionPerformed(evt);
            }
        });

        jSta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Unavailable", " " }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jmenuId, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jSta, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jTextMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                            .addGap(41, 41, 41)
                                            .addComponent(jLabel4)))
                                    .addGap(15, 15, 15))
                                .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jCat, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addGap(56, 56, 56)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextMenuItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jmenuId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );

        jButton5.setBackground(new java.awt.Color(255, 0, 51));
        jButton5.setFont(new java.awt.Font("Arial Narrow", 1, 11)); // NOI18N
        jButton5.setText("BACK");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        menuTable.setBackground(new java.awt.Color(255, 0, 51));
        menuTable.setFont(new java.awt.Font("Arial Black", 0, 11)); // NOI18N
        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Menu_ID", "Item Name", "Price", "Ingredients", "Status"
            }
        ));
        jScrollPane1.setViewportView(menuTable);

        jEnter.setText("Enter");
        jEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEnterActionPerformed(evt);
            }
        });

        jQueryB.setMaximumRowCount(4);
        jQueryB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jQueryB.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jQueryBMouseMoved(evt);
            }
        });
        jQueryB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jQueryBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jEnter, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                            .addComponent(jQueryB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(203, 203, 203))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jInput, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jqueryA, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jInput, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                            .addComponent(jqueryA))
                        .addGap(57, 57, 57)
                        .addComponent(jEnter)
                        .addGap(26, 26, 26)
                        .addComponent(jQueryB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemsActionPerformed
       
  String menuId=jmenuId.getText();
  int mId=Integer.parseInt(menuId);
        
        try{
                Connection connection = DriverManager.getConnection(url,user,password);
             
             String sql ="DELETE FROM menu WHERE menuId="+mId+" ";
             Statement statement = connection.createStatement();
             
           int rows =statement.executeUpdate(sql);
                 
              
               
                  
                  if(rows>0){
               DefaultTableModel db=(DefaultTableModel)menuTable.getModel();
              
              Statement st=connection.createStatement();
             ResultSet rs=st.executeQuery("SELECT * FROM MENU where categoryName in (SELECT categoryName FROM CATEGORIES) ORDER BY price,menuName");
              menuTable.setModel(DbUtils.resultSetToTableModel(rs));
            
              jmenuId.setText("");
               }
                  }
catch(SQLException e){
JOptionPane.showMessageDialog(f,"Updating Unsuccessful.Try again","Message",JOptionPane.OK_OPTION);
}
    }//GEN-LAST:event_deleteItemsActionPerformed

    private void addItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemsActionPerformed
               
  String itemN=jTextMenuItem.getText();
  String catI=jCat.getSelectedItem().toString();
 // int id=Integer.parseInt(catI);
  String price=Price.getText();
   float cost=Float.parseFloat(price);
  String ingre=jTextIngre.getText();
  String status=jSta.getSelectedItem().toString();
  try{
                Connection connection = DriverManager.getConnection(url,user,password);
             String sql = "INSERT INTO  menu values ('"+itemN+"','"+catI+"',"+cost+",'"+ingre+"','"+status+"')";
             Statement statement = connection.createStatement();
             
            
            
                  int rows =statement.executeUpdate(sql);
                   //statement.close();
               
                  
                  if(rows>0){
               
                  
              
              
         
              DefaultTableModel db=(DefaultTableModel)menuTable.getModel();
           
              Statement st=connection.createStatement();
             ResultSet rs=st.executeQuery("SELECT * FROM MENU where categoryName in (SELECT categoryName FROM CATEGORIES) ORDER BY price,menuName");
              menuTable.setModel(DbUtils.resultSetToTableModel(rs));
              jTextMenuItem.setText("");
             
              Price.setText("");
              jTextIngre.setText("");
              //jStatus.setText("");
              
              }
                  
                  
                  
}
catch(SQLException e){
JOptionPane.showMessageDialog(f,"Adding Unsuccessful.Try again","Message",JOptionPane.OK_OPTION);
}

  
  
    }//GEN-LAST:event_addItemsActionPerformed

    private void PriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PriceActionPerformed

    private void viewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewItemActionPerformed
       DefaultTableModel db=(DefaultTableModel)menuTable.getModel();
             try{
                 Connection connection = DriverManager.getConnection(url,user,password);
              Statement st=connection.createStatement();
             ResultSet rs=st.executeQuery("SELECT * FROM MENU where categoryName in (SELECT categoryName FROM CATEGORIES) ORDER BY price,menuName");
              menuTable.setModel(DbUtils.resultSetToTableModel(rs));}
             catch(SQLException e){
JOptionPane.showMessageDialog(f," Unsuccessful.Try again","Message",JOptionPane.OK_OPTION);
}
    }//GEN-LAST:event_viewItemActionPerformed

    private void updateItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateItemsActionPerformed
        // TODO add your handling code here:
        String itemN=jTextMenuItem.getText();
  String catI=jCat.getSelectedItem().toString();
  //int id=Integer.parseInt(catI);
  String price=Price.getText();
   float cost=Float.parseFloat(price);
  String ingre=jTextIngre.getText();
  String status=jSta.getSelectedItem().toString();
  String menuId=jmenuId.getText();
  int mId=Integer.parseInt(menuId);
        
        try{
                Connection connection = DriverManager.getConnection(url,user,password);
                System.out.println("hello");
             String sql ="UPDATE menu SET menuName='"+itemN+"', categoryName='"+catI+"',price="+cost+", ingredients='"+ingre+"', menuStatus='"+status+"' WHERE menuId="+mId+" ";
             Statement statement = connection.createStatement();
             
           int rows =statement.executeUpdate(sql);
                 
                   //statement.close();
               System.out.println(rows);
                  
                  if(rows>0){
               DefaultTableModel db=(DefaultTableModel)menuTable.getModel();
              
              Statement st=connection.createStatement();
             ResultSet rs=st.executeQuery("SELECT * FROM MENU where categoryName in (SELECT categoryName FROM CATEGORIES) ORDER BY price,menuName");
              menuTable.setModel(DbUtils.resultSetToTableModel(rs));
              jTextMenuItem.setText("");
              
              Price.setText("");
              jTextIngre.setText("");
              jmenuId.setText("");
               }
                  }
catch(SQLException e){
JOptionPane.showMessageDialog(f,"Updating Unsuccessful.Try again","Message",JOptionPane.OK_OPTION);
}

    }//GEN-LAST:event_updateItemsActionPerformed

    private void jCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCatActionPerformed

    private void jCatMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCatMouseMoved
       try{
       Connection connection = DriverManager.getConnection(url,user,password);
           Statement st=connection.createStatement();
            ResultSet rs=st.executeQuery("SELECT categoryName from CATEGORIES ORDER BY  categoryName ASC ");
            while(rs.next()){
            String name=rs.getString("categoryName");
            jCat.addItem(name);
            }
       
       }
       catch(SQLException e){
       JOptionPane.showMessageDialog(f,"Try again","Message",JOptionPane.OK_OPTION);
       }
    }//GEN-LAST:event_jCatMouseMoved

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
        this.dispose();
        Dashboard D=new Dashboard();
        D.setVisible(true);
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEnterActionPerformed
       String input=jInput.getText();
       
       try{
                 Connection connection = DriverManager.getConnection(url,user,password);
              Statement stmt=connection.createStatement();
              
              if(input.equals("minP")){
                String query2="SELECT menuName,price from menu where price=(SELECT MIN(PRICE) FROM MENU)";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
              else if(input.equals("maxP")){
                String query2="SELECT menuName,price from menu where price=(SELECT MAX(PRICE) FROM MENU)";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
              else if(input.equals("between min and max")){
                String query2="SELECT menuName,price from menu where price between "
                        + "(SELECT MIN(PRICE) FROM MENU) and (SELECT MAX(PRICE) FROM MENU) order by price";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
               else if(input.equals("Unavailable")){
                String query2="SELECT menuName,price from menu where menuStatus='Unavailable'";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
              else if(input.equals("Available")){
                String query2="SELECT menuName,price from menu where menuStatus='Available'";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
              else if(input.equals("beef")){
                String query2="SELECT menuName,price,ingredients from menu WHERE  ingredients LIKE '%beef%'";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
               else if(input.equals("MinCat")){
                String query2="SELECT min(price) as leastprice,categoryName from menu group by categoryName ORDER BY min(price)";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
              else if(input.equals("MaxCat")){
                String query2="SELECT max(price) as maxprice,categoryName from menu group by categoryName ORDER BY max(price)";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
                else if(input.equals("CountMenu")){
                String query2="SELECT COUNT(menuName) as TotalItems from menu";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
               else if(input.equals("CountCat")){
                String query2="SELECT COUNT(menuName) as NoOfItems,categoryName from menu  group by categoryName order by COUNT(menuName)";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
          
    }
          
            
       
             catch(SQLException e){
JOptionPane.showMessageDialog(f," Unsuccessful.Try again","Message",JOptionPane.OK_OPTION);
 jInput.setText("");
}
       
    }//GEN-LAST:event_jEnterActionPerformed

    private void jQueryBMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jQueryBMouseMoved
     try{
       Connection connection = DriverManager.getConnection(url,user,password);
           Statement st=connection.createStatement();
        
            ResultSet rs=st.executeQuery("SELECT queryD FROM QUERIES ORDER BY queryD asc");
            while(rs.next()){
            String name=rs.getString("queryD");
            jQueryB.addItem(name);
            }
       
       }
       catch(SQLException e){
       JOptionPane.showMessageDialog(f,"Try again","Message",JOptionPane.OK_OPTION);
       }      
      String input=jInput.getText();
       
       try{
                 Connection connection = DriverManager.getConnection(url,user,password);
              Statement stmt=connection.createStatement();
             String d= jQueryB.getSelectedItem().toString();
              if(d.equals("minP")){
                String query2="SELECT menuName,price from menu where price=(SELECT MIN(PRICE) FROM MENU)";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
              else if(d.equals("maxP")){
                String query2="SELECT menuName,price from menu where price=(SELECT MAX(PRICE) FROM MENU)";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
              else if(d.equals("between min and max price")){
                String query2="SELECT menuName,price from menu where price between "
                        + "(SELECT MIN(PRICE) FROM MENU) and (SELECT MAX(PRICE) FROM MENU) order by price";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
               else if(d.equals("Unavailable")){
                String query2="SELECT menuName,price from menu where menuStatus='Unavailable'";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
              else if(d.equals("Available")){
                String query2="SELECT menuName,price from menu where menuStatus='Available'";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
              else if(d.equals("beef")){
                String query2="SELECT menuName,price,ingredients from menu WHERE  ingredients LIKE '%beef%'";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
               else if(d.equals("MinCatPrice")){
                String query2="SELECT min(price) as leastprice,categoryName from menu group by categoryName ORDER BY min(price)";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
              else if(d.equals("MaxCatgPrice")){
                String query2="SELECT max(price) as maxprice,categoryName from menu group by categoryName ORDER BY max(price)";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
                else if(d.equals("TotalmenuItems")){
                String query2="SELECT COUNT(menuName) as TotalItems from menu";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
               else if(d.equals("itemsinEachCat")){
                String query2="SELECT COUNT(menuName) as NoOfItems,categoryName from menu  group by categoryName order by COUNT(menuName)";
                  ResultSet rs=stmt.executeQuery(query2);  
                  menuTable.setModel(DbUtils.resultSetToTableModel(rs));
                  jInput.setText("");}
          
    }
          
            
       
             catch(SQLException e){
JOptionPane.showMessageDialog(f," Unsuccessful.Try again","Message",JOptionPane.OK_OPTION);
 jInput.setText("");
}
    }//GEN-LAST:event_jQueryBMouseMoved

    private void jQueryBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jQueryBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jQueryBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new Menu().setVisible(true);
                
                
             
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Price;
    private javax.swing.JButton addItems;
    private javax.swing.JButton deleteItems;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jCat;
    private javax.swing.JButton jEnter;
    private javax.swing.JTextField jInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JComboBox<String> jQueryB;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> jSta;
    private javax.swing.JTextArea jTextIngre;
    private javax.swing.JTextField jTextMenuItem;
    private javax.swing.JTextField jmenuId;
    private javax.swing.JTextField jqueryA;
    private javax.swing.JTable menuTable;
    private javax.swing.JButton updateItems;
    private javax.swing.JButton viewItem;
    // End of variables declaration//GEN-END:variables
}
